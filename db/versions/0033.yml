version: 33
migrationScript: 0033-migration.sql
downgradeScript: 0033-downgrade.sql
methods:
  session_add:
    description: |-
      Set a session.

      If no session exists with hashed session id `hashed_session_id_in`,
      a new row is inserted, otherwise the existing session's data is replaced
      with the data in `data_in`.
    mode: write
    serviceName: web_server
    args: hashed_session_id_in text, encrypted_session_id_in jsonb, data_in jsonb, expires_in timestamptz
    returns: void
    body: |-
      begin
        insert into sessions(hashed_session_id, encrypted_session_id, data, expires)
        values (
          hashed_session_id_in,
          encrypted_session_id_in,
          data_in,
          expires_in
        ) on conflict (hashed_session_id) do
        update
        set (encrypted_session_id, data, expires) = (encrypted_session_id_in, data_in, expires_in)
        where sessions.hashed_session_id = session_add.hashed_session_id_in;
      end
  session_load:
    description: Returns the session for a given hashed session id.
    mode: read
    serviceName: web_server
    args: hashed_session_id_in text
    returns: table(hashed_session_id text, encrypted_session_id jsonb, data jsonb, expires timestamptz)
    body: |-
      begin
        return query
        select sessions.hashed_session_id, sessions.encrypted_session_id, sessions.data, sessions.expires from sessions
        where sessions.hashed_session_id = hashed_session_id_in;
      end
  session_remove:
    description: Removes a web session
    mode: write
    serviceName: web_server
    args: hashed_session_id_in text
    returns: void
    body: |-
      begin
        delete from sessions
        where
          sessions.hashed_session_id = hashed_session_id_in;
      end
  expire_sessions:
    description: |-
      Expire sessions that come before the current time.
      Returns a count of rows that have been deleted.
    mode: write
    serviceName: web_server
    args: ''
    returns: integer
    body: |-
      declare
        count integer;
      begin
        delete from sessions where sessions.expires < now();
        if found then
          get diagnostics count = row_count;
          return count;
        end if;
        return 0;
      end
